import { FormArray as NgFormArray } from '@angular/forms';
import { defer, merge, of } from 'rxjs';
import { distinctUntilChanged, map, debounceTime, switchMap } from 'rxjs/operators';
import { coerceArray, isNil, wrapIntoObservable } from './utils';
function getControlValue(control) {
    if (control.getRawValue) {
        return control.getRawValue();
    }
    return control.value;
}
function compareErrors(a, b) {
    if (isNil(a) || isNil(b)) {
        return a === b;
    }
    return JSON.stringify(a) === JSON.stringify(b);
}
export function controlValueChanges$(control) {
    return merge(defer(() => of(getControlValue(control))), control.valueChanges.pipe(map(() => getControlValue(control))));
}
export function controlDisabled$(control) {
    return merge(defer(() => of(control.disabled)), control.statusChanges.pipe(map(() => control.disabled), distinctUntilChanged()));
}
export function controlEnabled$(control) {
    return merge(defer(() => of(control.enabled)), control.statusChanges.pipe(map(() => control.enabled), distinctUntilChanged()));
}
export function controlStatusChanges$(control) {
    return merge(defer(() => of(control.status)), control.statusChanges.pipe(map(() => control.status), distinctUntilChanged()));
}
export function controlErrorChanges$(control) {
    return merge(defer(() => of(control.errors)), control.valueChanges.pipe(map(() => control.errors), distinctUntilChanged((a, b) => compareErrors(a, b))));
}
export function enableControl(control, enabled, opts) {
    if (enabled) {
        control.enable(opts);
    }
    else {
        control.disable(opts);
    }
}
export function disableControl(control, disabled, opts) {
    enableControl(control, !disabled, opts);
}
export function controlDisabledWhile(control, observable, opts) {
    return observable.subscribe(isDisabled => disableControl(control, isDisabled, opts));
}
export function controlEnabledWhile(control, observable, opts) {
    return observable.subscribe(isEnabled => enableControl(control, isEnabled, opts));
}
export function mergeControlValidators(control, validators) {
    control.setValidators([control.validator, ...coerceArray(validators)]);
    control.updateValueAndValidity();
}
export function validateControlOn(control, validation) {
    return validation.subscribe(maybeError => {
        control.setErrors(maybeError);
    });
}
export function hasErrorAndTouched(control, error, path) {
    const hasError = control.hasError(error, !path || path.length === 0 ? undefined : path);
    return hasError && control.touched;
}
export function hasErrorAndDirty(control, error, path) {
    const hasError = control.hasError(error, !path || path.length === 0 ? undefined : path);
    return hasError && control.dirty;
}
export function markAllDirty(control) {
    control.markAsDirty({ onlySelf: true });
    control._forEachChild(control => control.markAllAsDirty());
}
export function selectControlValue$(control, mapFn) {
    return control.value$.pipe(map(mapFn), distinctUntilChanged());
}
export function persistValue$(control, key, options) {
    return control.valueChanges.pipe(debounceTime(options.debounceTime), switchMap(value => wrapIntoObservable(options.manager.setValue(key, value))));
}
export function handleFormArrays(control, formValue, arrControlFactory) {
    Object.keys(formValue).forEach(controlName => {
        const value = formValue[controlName];
        if (Array.isArray(value) && control.get(controlName) instanceof NgFormArray) {
            if (!arrControlFactory || (arrControlFactory && !(controlName in arrControlFactory))) {
                throw new Error(`Please provide arrControlFactory for ${controlName}`);
            }
            const current = control.get(controlName);
            const fc = arrControlFactory[controlName];
            clearFormArray(current);
            value.forEach((v, i) => current.insert(i, fc(v)));
        }
    });
}
export function clearFormArray(control) {
    while (control.length !== 0) {
        control.removeAt(0);
    }
}
//# sourceMappingURL=data:application/json;base64,