import { FormControl as NgFormControl } from '@angular/forms';
import { isObservable, Subject } from 'rxjs';
import { distinctUntilChanged } from 'rxjs/operators';
import { controlDisabled$, controlDisabledWhile, controlEnabled$, controlEnabledWhile, controlErrorChanges$, controlStatusChanges$, controlValueChanges$, disableControl, enableControl, hasErrorAndDirty, hasErrorAndTouched, mergeControlValidators, validateControlOn } from './control-actions';
import { coerceArray } from './utils';
export class FormControl extends NgFormControl {
    constructor(formState, validatorOrOpts, asyncValidator) {
        super(formState, validatorOrOpts, asyncValidator);
        this.touchChanges = new Subject();
        this.dirtyChanges = new Subject();
        this.touch$ = this.touchChanges.asObservable().pipe(distinctUntilChanged());
        this.dirty$ = this.dirtyChanges.asObservable().pipe(distinctUntilChanged());
        this.value$ = controlValueChanges$(this);
        this.disabled$ = controlDisabled$(this);
        this.enabled$ = controlEnabled$(this);
        this.status$ = controlStatusChanges$(this);
        this.errors$ = controlErrorChanges$(this);
    }
    setValue(valueOrObservable, options) {
        if (isObservable(valueOrObservable)) {
            return valueOrObservable.subscribe(value => super.setValue(value, options));
        }
        super.setValue(valueOrObservable, options);
    }
    patchValue(valueOrObservable, options) {
        if (isObservable(valueOrObservable)) {
            return valueOrObservable.subscribe(value => super.patchValue(value, options));
        }
        super.patchValue(valueOrObservable, options);
    }
    disabledWhile(observable, options) {
        return controlDisabledWhile(this, observable, options);
    }
    enabledWhile(observable, options) {
        return controlEnabledWhile(this, observable, options);
    }
    mergeValidators(validators) {
        mergeControlValidators(this, validators);
    }
    mergeAsyncValidators(validators) {
        this.setAsyncValidators([this.asyncValidator, ...coerceArray(validators)]);
        this.updateValueAndValidity();
    }
    markAsTouched(opts) {
        super.markAsTouched(opts);
        this.touchChanges.next(true);
    }
    markAsUntouched(opts) {
        super.markAsUntouched(opts);
        this.touchChanges.next(false);
    }
    markAsPristine(opts) {
        super.markAsPristine(opts);
        this.dirtyChanges.next(false);
    }
    markAsDirty(opts) {
        super.markAsDirty(opts);
        this.dirtyChanges.next(true);
    }
    markAllAsDirty() {
        this.markAsDirty({ onlySelf: true });
    }
    reset(formState, options) {
        super.reset(formState, options);
    }
    setValidators(newValidator) {
        super.setValidators(newValidator);
        super.updateValueAndValidity();
    }
    setAsyncValidators(newValidator) {
        super.setAsyncValidators(newValidator);
        super.updateValueAndValidity();
    }
    validateOn(observableValidation) {
        return validateControlOn(this, observableValidation);
    }
    getError(errorCode) {
        return super.getError(errorCode);
    }
    hasError(errorCode) {
        return super.hasError(errorCode);
    }
    setErrors(errors, opts = {}) {
        return super.setErrors(errors, opts);
    }
    hasErrorAndTouched(error) {
        return hasErrorAndTouched(this, error);
    }
    hasErrorAndDirty(error) {
        return hasErrorAndDirty(this, error);
    }
    setEnable(enable = true, opts) {
        enableControl(this, enable, opts);
    }
    setDisable(disable = true, opts) {
        disableControl(this, disable, opts);
    }
}
//# sourceMappingURL=data:application/json;base64,