import { __read, __spread } from "tslib";
import { FormArray as NgFormArray } from '@angular/forms';
import { defer, merge, of } from 'rxjs';
import { distinctUntilChanged, map, debounceTime, switchMap } from 'rxjs/operators';
import { coerceArray, isNil, wrapIntoObservable } from './utils';
function getControlValue(control) {
    if (control.getRawValue) {
        return control.getRawValue();
    }
    return control.value;
}
function compareErrors(a, b) {
    if (isNil(a) || isNil(b)) {
        return a === b;
    }
    return JSON.stringify(a) === JSON.stringify(b);
}
export function controlValueChanges$(control) {
    return merge(defer(function () { return of(getControlValue(control)); }), control.valueChanges.pipe(map(function () { return getControlValue(control); })));
}
export function controlDisabled$(control) {
    return merge(defer(function () { return of(control.disabled); }), control.statusChanges.pipe(map(function () { return control.disabled; }), distinctUntilChanged()));
}
export function controlEnabled$(control) {
    return merge(defer(function () { return of(control.enabled); }), control.statusChanges.pipe(map(function () { return control.enabled; }), distinctUntilChanged()));
}
export function controlStatusChanges$(control) {
    return merge(defer(function () { return of(control.status); }), control.statusChanges.pipe(map(function () { return control.status; }), distinctUntilChanged()));
}
export function controlErrorChanges$(control) {
    return merge(defer(function () { return of(control.errors); }), control.valueChanges.pipe(map(function () { return control.errors; }), distinctUntilChanged(function (a, b) { return compareErrors(a, b); })));
}
export function enableControl(control, enabled, opts) {
    if (enabled) {
        control.enable(opts);
    }
    else {
        control.disable(opts);
    }
}
export function disableControl(control, disabled, opts) {
    enableControl(control, !disabled, opts);
}
export function controlDisabledWhile(control, observable, opts) {
    return observable.subscribe(function (isDisabled) { return disableControl(control, isDisabled, opts); });
}
export function controlEnabledWhile(control, observable, opts) {
    return observable.subscribe(function (isEnabled) { return enableControl(control, isEnabled, opts); });
}
export function mergeControlValidators(control, validators) {
    control.setValidators(__spread([control.validator], coerceArray(validators)));
    control.updateValueAndValidity();
}
export function validateControlOn(control, validation) {
    return validation.subscribe(function (maybeError) {
        control.setErrors(maybeError);
    });
}
export function hasErrorAndTouched(control, error, path) {
    var hasError = control.hasError(error, !path || path.length === 0 ? undefined : path);
    return hasError && control.touched;
}
export function hasErrorAndDirty(control, error, path) {
    var hasError = control.hasError(error, !path || path.length === 0 ? undefined : path);
    return hasError && control.dirty;
}
export function markAllDirty(control) {
    control.markAsDirty({ onlySelf: true });
    control._forEachChild(function (control) { return control.markAllAsDirty(); });
}
export function selectControlValue$(control, mapFn) {
    return control.value$.pipe(map(mapFn), distinctUntilChanged());
}
export function persistValue$(control, key, options) {
    return control.valueChanges.pipe(debounceTime(options.debounceTime), switchMap(function (value) { return wrapIntoObservable(options.manager.setValue(key, value)); }));
}
export function handleFormArrays(control, formValue, arrControlFactory) {
    Object.keys(formValue).forEach(function (controlName) {
        var value = formValue[controlName];
        if (Array.isArray(value) && control.get(controlName) instanceof NgFormArray) {
            if (!arrControlFactory || (arrControlFactory && !(controlName in arrControlFactory))) {
                throw new Error("Please provide arrControlFactory for " + controlName);
            }
            var current_1 = control.get(controlName);
            var fc_1 = arrControlFactory[controlName];
            clearFormArray(current_1);
            value.forEach(function (v, i) { return current_1.insert(i, fc_1(v)); });
        }
    });
}
export function clearFormArray(control) {
    while (control.length !== 0) {
        control.removeAt(0);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJvbC1hY3Rpb25zLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5nbmVhdC9yZWFjdGl2ZS1mb3Jtcy8iLCJzb3VyY2VzIjpbImxpYi9jb250cm9sLWFjdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBb0IsU0FBUyxJQUFJLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzVFLE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFjLEVBQUUsRUFBZ0IsTUFBTSxNQUFNLENBQUM7QUFDbEUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLEdBQUcsRUFBTyxZQUFZLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFhekYsT0FBTyxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFFakUsU0FBUyxlQUFlLENBQUksT0FBMkI7SUFDckQsSUFBSyxPQUFlLENBQUMsV0FBVyxFQUFFO1FBQ2hDLE9BQVEsT0FBZSxDQUFDLFdBQVcsRUFBRSxDQUFDO0tBQ3ZDO0lBQ0QsT0FBTyxPQUFPLENBQUMsS0FBSyxDQUFDO0FBQ3ZCLENBQUM7QUFFRCxTQUFTLGFBQWEsQ0FBQyxDQUEwQixFQUFFLENBQTBCO0lBQzNFLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRTtRQUN4QixPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDaEI7SUFDRCxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNqRCxDQUFDO0FBRUQsTUFBTSxVQUFVLG9CQUFvQixDQUFJLE9BQTJCO0lBQ2pFLE9BQU8sS0FBSyxDQUNWLEtBQUssQ0FBQyxjQUFNLE9BQUEsRUFBRSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUE1QixDQUE0QixDQUFDLEVBQ3pDLE9B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LElBQUksaUJBQWlCLENBQUMsQ0FBQyxFQUFFO2dCQUNwRixNQUFNLElBQUksS0FBSyxDQUFDLDBDQUF3QyxXQUFhLENBQUMsQ0FBQzthQUN4RTtZQUNELElBQU0sU0FBTyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFnQixDQUFDO1lBQ3hELElBQU0sSUFBRSxHQUFHLGlCQUFpQixDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQzFDLGNBQWMsQ0FBQyxTQUFPLENBQUMsQ0FBQztZQUN4QixLQUFLLENBQUMsT0FBTyxDQUFDLFVBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSyxPQUFBLFNBQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLElBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUF4QixDQUF3QixDQUFDLENBQUM7U0FDbkQ7SUFDSCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUM7QUFFRCxNQUFNLFVBQVUsY0FBYyxDQUFDLE9BQW9CO0lBQ2pELE9BQU8sT0FBTyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7UUFDM0IsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUNyQjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBWYWxpZGF0aW9uRXJyb3JzLCBGb3JtQXJyYXkgYXMgTmdGb3JtQXJyYXkgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBkZWZlciwgbWVyZ2UsIE9ic2VydmFibGUsIG9mLCBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGRpc3RpbmN0VW50aWxDaGFuZ2VkLCBtYXAsIHRhcCwgZGVib3VuY2VUaW1lLCBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBGb3JtQXJyYXkgfSBmcm9tICcuL2Zvcm1BcnJheSc7XG5pbXBvcnQgeyBGb3JtQ29udHJvbCB9IGZyb20gJy4vZm9ybUNvbnRyb2wnO1xuaW1wb3J0IHsgRm9ybUdyb3VwIH0gZnJvbSAnLi9mb3JtR3JvdXAnO1xuaW1wb3J0IHtcbiAgQWJzdHJhY3RDb250cm9sLFxuICBDb250cm9sT3B0aW9ucyxcbiAgQ29udHJvbFN0YXRlLFxuICBWYWxpZGF0b3JGbixcbiAgQ29udHJvbFBhdGgsXG4gIFBlcnNpc3RPcHRpb25zLFxuICBDb250cm9sRmFjdG9yeU1hcFxufSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7IGNvZXJjZUFycmF5LCBpc05pbCwgd3JhcEludG9PYnNlcnZhYmxlIH0gZnJvbSAnLi91dGlscyc7XG5cbmZ1bmN0aW9uIGdldENvbnRyb2xWYWx1ZTxUPihjb250cm9sOiBBYnN0cmFjdENvbnRyb2w8VD4pOiBUIHtcbiAgaWYgKChjb250cm9sIGFzIGFueSkuZ2V0UmF3VmFsdWUpIHtcbiAgICByZXR1cm4gKGNvbnRyb2wgYXMgYW55KS5nZXRSYXdWYWx1ZSgpO1xuICB9XG4gIHJldHVybiBjb250cm9sLnZhbHVlO1xufVxuXG5mdW5jdGlvbiBjb21wYXJlRXJyb3JzKGE6IFZhbGlkYXRpb25FcnJvcnMgfCBudWxsLCBiOiBWYWxpZGF0aW9uRXJyb3JzIHwgbnVsbCkge1xuICBpZiAoaXNOaWwoYSkgfHwgaXNOaWwoYikpIHtcbiAgICByZXR1cm4gYSA9PT0gYjtcbiAgfVxuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoYSkgPT09IEpTT04uc3RyaW5naWZ5KGIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29udHJvbFZhbHVlQ2hhbmdlcyQ8VD4oY29udHJvbDogQWJzdHJhY3RDb250cm9sPFQ+KTogT2JzZXJ2YWJsZTxUPiB7XG4gIHJldHVybiBtZXJnZShcbiAgICBkZWZlcigoKSA9PiBvZihnZXRDb250cm9sVmFsdWUoY29udHJvbCkpKSxcbiAgICBjb250cm9sLnZhbHVlQ2hhbmdlcy5waXBlKG1hcCgoKSA9PiBnZXRDb250cm9sVmFsdWUoY29udHJvbCkpKVxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29udHJvbERpc2FibGVkJDxUPihjb250cm9sOiBBYnN0cmFjdENvbnRyb2w8VD4pOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcbiAgcmV0dXJuIG1lcmdlKFxuICAgIGRlZmVyKCgpID0+IG9mKGNvbnRyb2wuZGlzYWJsZWQpKSxcbiAgICBjb250cm9sLnN0YXR1c0NoYW5nZXMucGlwZShcbiAgICAgIG1hcCgoKSA9PiBjb250cm9sLmRpc2FibGVkKSxcbiAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKClcbiAgICApXG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb250cm9sRW5hYmxlZCQ8VD4oY29udHJvbDogQWJzdHJhY3RDb250cm9sPFQ+KTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG4gIHJldHVybiBtZXJnZShcbiAgICBkZWZlcigoKSA9PiBvZihjb250cm9sLmVuYWJsZWQpKSxcbiAgICBjb250cm9sLnN0YXR1c0NoYW5nZXMucGlwZShcbiAgICAgIG1hcCgoKSA9PiBjb250cm9sLmVuYWJsZWQpLFxuICAgICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKVxuICAgIClcbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbnRyb2xTdGF0dXNDaGFuZ2VzJDxUPihjb250cm9sOiBBYnN0cmFjdENvbnRyb2w8VD4pOiBPYnNlcnZhYmxlPENvbnRyb2xTdGF0ZT4ge1xuICByZXR1cm4gbWVyZ2UoXG4gICAgZGVmZXIoKCkgPT4gb2YoY29udHJvbC5zdGF0dXMgYXMgQ29udHJvbFN0YXRlKSksXG4gICAgY29udHJvbC5zdGF0dXNDaGFuZ2VzLnBpcGUoXG4gICAgICBtYXAoKCkgPT4gY29udHJvbC5zdGF0dXMgYXMgQ29udHJvbFN0YXRlKSxcbiAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKClcbiAgICApXG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb250cm9sRXJyb3JDaGFuZ2VzJDxFPihjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpOiBPYnNlcnZhYmxlPEUgfCBudWxsPiB7XG4gIHJldHVybiBtZXJnZShcbiAgICBkZWZlcigoKSA9PiBvZihjb250cm9sLmVycm9ycyBhcyBFKSksXG4gICAgY29udHJvbC52YWx1ZUNoYW5nZXMucGlwZShcbiAgICAgIG1hcCgoKSA9PiBjb250cm9sLmVycm9ycyBhcyBFKSxcbiAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKChhLCBiKSA9PiBjb21wYXJlRXJyb3JzKGEsIGIpKVxuICAgIClcbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGVuYWJsZUNvbnRyb2w8VD4oY29udHJvbDogQWJzdHJhY3RDb250cm9sPFQ+LCBlbmFibGVkOiBib29sZWFuLCBvcHRzPzogQ29udHJvbE9wdGlvbnMpOiB2b2lkIHtcbiAgaWYgKGVuYWJsZWQpIHtcbiAgICBjb250cm9sLmVuYWJsZShvcHRzKTtcbiAgfSBlbHNlIHtcbiAgICBjb250cm9sLmRpc2FibGUob3B0cyk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRpc2FibGVDb250cm9sPFQ+KGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbDxUPiwgZGlzYWJsZWQ6IGJvb2xlYW4sIG9wdHM/OiBDb250cm9sT3B0aW9ucyk6IHZvaWQge1xuICBlbmFibGVDb250cm9sKGNvbnRyb2wsICFkaXNhYmxlZCwgb3B0cyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb250cm9sRGlzYWJsZWRXaGlsZTxUPihcbiAgY29udHJvbDogQWJzdHJhY3RDb250cm9sPFQ+LFxuICBvYnNlcnZhYmxlOiBPYnNlcnZhYmxlPGJvb2xlYW4+LFxuICBvcHRzPzogQ29udHJvbE9wdGlvbnNcbik6IFN1YnNjcmlwdGlvbiB7XG4gIHJldHVybiBvYnNlcnZhYmxlLnN1YnNjcmliZShpc0Rpc2FibGVkID0+IGRpc2FibGVDb250cm9sKGNvbnRyb2wsIGlzRGlzYWJsZWQsIG9wdHMpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbnRyb2xFbmFibGVkV2hpbGU8VD4oXG4gIGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbDxUPixcbiAgb2JzZXJ2YWJsZTogT2JzZXJ2YWJsZTxib29sZWFuPixcbiAgb3B0cz86IENvbnRyb2xPcHRpb25zXG4pOiBTdWJzY3JpcHRpb24ge1xuICByZXR1cm4gb2JzZXJ2YWJsZS5zdWJzY3JpYmUoaXNFbmFibGVkID0+IGVuYWJsZUNvbnRyb2woY29udHJvbCwgaXNFbmFibGVkLCBvcHRzKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZUNvbnRyb2xWYWxpZGF0b3JzPFQsIENvbnRyb2wgZXh0ZW5kcyBBYnN0cmFjdENvbnRyb2w8VD4+KFxuICBjb250cm9sOiBDb250cm9sLFxuICB2YWxpZGF0b3JzOiBWYWxpZGF0b3JGbjxUPiB8IFZhbGlkYXRvckZuPFQ+W11cbik6IHZvaWQge1xuICBjb250cm9sLnNldFZhbGlkYXRvcnMoW2NvbnRyb2wudmFsaWRhdG9yLCAuLi5jb2VyY2VBcnJheSh2YWxpZGF0b3JzKV0pO1xuICBjb250cm9sLnVwZGF0ZVZhbHVlQW5kVmFsaWRpdHkoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlQ29udHJvbE9uPFQ+KGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbDxUPiwgdmFsaWRhdGlvbjogT2JzZXJ2YWJsZTxudWxsIHwgb2JqZWN0Pik6IFN1YnNjcmlwdGlvbiB7XG4gIHJldHVybiB2YWxpZGF0aW9uLnN1YnNjcmliZShtYXliZUVycm9yID0+IHtcbiAgICBjb250cm9sLnNldEVycm9ycyhtYXliZUVycm9yKTtcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNFcnJvckFuZFRvdWNoZWQ8VD4oY29udHJvbDogQWJzdHJhY3RDb250cm9sPFQ+LCBlcnJvcjogc3RyaW5nLCBwYXRoPzogQ29udHJvbFBhdGgpOiBib29sZWFuIHtcbiAgY29uc3QgaGFzRXJyb3IgPSBjb250cm9sLmhhc0Vycm9yKGVycm9yLCAhcGF0aCB8fCBwYXRoLmxlbmd0aCA9PT0gMCA/IHVuZGVmaW5lZCA6IHBhdGgpO1xuICByZXR1cm4gaGFzRXJyb3IgJiYgY29udHJvbC50b3VjaGVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaGFzRXJyb3JBbmREaXJ0eTxUPihjb250cm9sOiBBYnN0cmFjdENvbnRyb2w8VD4sIGVycm9yOiBzdHJpbmcsIHBhdGg/OiBDb250cm9sUGF0aCk6IGJvb2xlYW4ge1xuICBjb25zdCBoYXNFcnJvciA9IGNvbnRyb2wuaGFzRXJyb3IoZXJyb3IsICFwYXRoIHx8IHBhdGgubGVuZ3RoID09PSAwID8gdW5kZWZpbmVkIDogcGF0aCk7XG4gIHJldHVybiBoYXNFcnJvciAmJiBjb250cm9sLmRpcnR5O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWFya0FsbERpcnR5PFQ+KGNvbnRyb2w6IEZvcm1BcnJheTxUPiB8IEZvcm1Hcm91cDxUPik6IHZvaWQge1xuICBjb250cm9sLm1hcmtBc0RpcnR5KHsgb25seVNlbGY6IHRydWUgfSk7XG4gIChjb250cm9sIGFzIGFueSkuX2ZvckVhY2hDaGlsZChjb250cm9sID0+IGNvbnRyb2wubWFya0FsbEFzRGlydHkoKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZWxlY3RDb250cm9sVmFsdWUkPFQsIFI+KFxuICBjb250cm9sOiBGb3JtR3JvdXA8VD4gfCBGb3JtQXJyYXk8VD4gfCBGb3JtQ29udHJvbDxUPixcbiAgbWFwRm46IChzdGF0ZTogVCB8IFRbXSkgPT4gUlxuKTogT2JzZXJ2YWJsZTxSPiB7XG4gIHJldHVybiAoY29udHJvbC52YWx1ZSQgYXMgT2JzZXJ2YWJsZTxhbnk+KS5waXBlKG1hcChtYXBGbiksIGRpc3RpbmN0VW50aWxDaGFuZ2VkKCkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGVyc2lzdFZhbHVlJDxUPihjb250cm9sOiBGb3JtR3JvdXA8VD4sIGtleTogc3RyaW5nLCBvcHRpb25zOiBQZXJzaXN0T3B0aW9uczxUPik6IE9ic2VydmFibGU8VD4ge1xuICByZXR1cm4gY29udHJvbC52YWx1ZUNoYW5nZXMucGlwZShcbiAgICBkZWJvdW5jZVRpbWUob3B0aW9ucy5kZWJvdW5jZVRpbWUpLFxuICAgIHN3aXRjaE1hcCh2YWx1ZSA9PiB3cmFwSW50b09ic2VydmFibGUob3B0aW9ucy5tYW5hZ2VyLnNldFZhbHVlKGtleSwgdmFsdWUpKSlcbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhbmRsZUZvcm1BcnJheXM8VD4oXG4gIGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbDxUPixcbiAgZm9ybVZhbHVlOiBULFxuICBhcnJDb250cm9sRmFjdG9yeTogQ29udHJvbEZhY3RvcnlNYXA8VD5cbikge1xuICBPYmplY3Qua2V5cyhmb3JtVmFsdWUpLmZvckVhY2goY29udHJvbE5hbWUgPT4ge1xuICAgIGNvbnN0IHZhbHVlID0gZm9ybVZhbHVlW2NvbnRyb2xOYW1lXTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgY29udHJvbC5nZXQoY29udHJvbE5hbWUpIGluc3RhbmNlb2YgTmdGb3JtQXJyYXkpIHtcbiAgICAgIGlmICghYXJyQ29udHJvbEZhY3RvcnkgfHwgKGFyckNvbnRyb2xGYWN0b3J5ICYmICEoY29udHJvbE5hbWUgaW4gYXJyQ29udHJvbEZhY3RvcnkpKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFBsZWFzZSBwcm92aWRlIGFyckNvbnRyb2xGYWN0b3J5IGZvciAke2NvbnRyb2xOYW1lfWApO1xuICAgICAgfVxuICAgICAgY29uc3QgY3VycmVudCA9IGNvbnRyb2wuZ2V0KGNvbnRyb2xOYW1lKSBhcyBOZ0Zvcm1BcnJheTtcbiAgICAgIGNvbnN0IGZjID0gYXJyQ29udHJvbEZhY3RvcnlbY29udHJvbE5hbWVdO1xuICAgICAgY2xlYXJGb3JtQXJyYXkoY3VycmVudCk7XG4gICAgICB2YWx1ZS5mb3JFYWNoKCh2LCBpKSA9PiBjdXJyZW50Lmluc2VydChpLCBmYyh2KSkpO1xuICAgIH1cbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjbGVhckZvcm1BcnJheShjb250cm9sOiBOZ0Zvcm1BcnJheSkge1xuICB3aGlsZSAoY29udHJvbC5sZW5ndGggIT09IDApIHtcbiAgICBjb250cm9sLnJlbW92ZUF0KDApO1xuICB9XG59XG4iXX0=