import { __extends, __read, __spread } from "tslib";
import { FormControl as NgFormControl } from '@angular/forms';
import { isObservable, Subject } from 'rxjs';
import { distinctUntilChanged } from 'rxjs/operators';
import { controlDisabled$, controlDisabledWhile, controlEnabled$, controlEnabledWhile, controlErrorChanges$, controlStatusChanges$, controlValueChanges$, disableControl, enableControl, hasErrorAndDirty, hasErrorAndTouched, mergeControlValidators, validateControlOn } from './control-actions';
import { coerceArray } from './utils';
var FormControl = /** @class */ (function (_super) {
    __extends(FormControl, _super);
    function FormControl(formState, validatorOrOpts, asyncValidator) {
        var _this = _super.call(this, formState, validatorOrOpts, asyncValidator) || this;
        _this.touchChanges = new Subject();
        _this.dirtyChanges = new Subject();
        _this.touch$ = _this.touchChanges.asObservable().pipe(distinctUntilChanged());
        _this.dirty$ = _this.dirtyChanges.asObservable().pipe(distinctUntilChanged());
        _this.value$ = controlValueChanges$(_this);
        _this.disabled$ = controlDisabled$(_this);
        _this.enabled$ = controlEnabled$(_this);
        _this.status$ = controlStatusChanges$(_this);
        _this.errors$ = controlErrorChanges$(_this);
        return _this;
    }
    FormControl.prototype.setValue = function (valueOrObservable, options) {
        var _this = this;
        if (isObservable(valueOrObservable)) {
            return valueOrObservable.subscribe(function (value) { return _super.prototype.setValue.call(_this, value, options); });
        }
        _super.prototype.setValue.call(this, valueOrObservable, options);
    };
    FormControl.prototype.patchValue = function (valueOrObservable, options) {
        var _this = this;
        if (isObservable(valueOrObservable)) {
            return valueOrObservable.subscribe(function (value) { return _super.prototype.patchValue.call(_this, value, options); });
        }
        _super.prototype.patchValue.call(this, valueOrObservable, options);
    };
    FormControl.prototype.disabledWhile = function (observable, options) {
        return controlDisabledWhile(this, observable, options);
    };
    FormControl.prototype.enabledWhile = function (observable, options) {
        return controlEnabledWhile(this, observable, options);
    };
    FormControl.prototype.mergeValidators = function (validators) {
        mergeControlValidators(this, validators);
    };
    FormControl.prototype.mergeAsyncValidators = function (validators) {
        this.setAsyncValidators(__spread([this.asyncValidator], coerceArray(validators)));
        this.updateValueAndValidity();
    };
    FormControl.prototype.markAsTouched = function (opts) {
        _super.prototype.markAsTouched.call(this, opts);
        this.touchChanges.next(true);
    };
    FormControl.prototype.markAsUntouched = function (opts) {
        _super.prototype.markAsUntouched.call(this, opts);
        this.touchChanges.next(false);
    };
    FormControl.prototype.markAsPristine = function (opts) {
        _super.prototype.markAsPristine.call(this, opts);
        this.dirtyChanges.next(false);
    };
    FormControl.prototype.markAsDirty = function (opts) {
        _super.prototype.markAsDirty.call(this, opts);
        this.dirtyChanges.next(true);
    };
    FormControl.prototype.markAllAsDirty = function () {
        this.markAsDirty({ onlySelf: true });
    };
    FormControl.prototype.reset = function (formState, options) {
        _super.prototype.reset.call(this, formState, options);
    };
    FormControl.prototype.setValidators = function (newValidator) {
        _super.prototype.setValidators.call(this, newValidator);
        _super.prototype.updateValueAndValidity.call(this);
    };
    FormControl.prototype.setAsyncValidators = function (newValidator) {
        _super.prototype.setAsyncValidators.call(this, newValidator);
        _super.prototype.updateValueAndValidity.call(this);
    };
    FormControl.prototype.validateOn = function (observableValidation) {
        return validateControlOn(this, observableValidation);
    };
    FormControl.prototype.getError = function (errorCode) {
        return _super.prototype.getError.call(this, errorCode);
    };
    FormControl.prototype.hasError = function (errorCode) {
        return _super.prototype.hasError.call(this, errorCode);
    };
    FormControl.prototype.setErrors = function (errors, opts) {
        if (opts === void 0) { opts = {}; }
        return _super.prototype.setErrors.call(this, errors, opts);
    };
    FormControl.prototype.hasErrorAndTouched = function (error) {
        return hasErrorAndTouched(this, error);
    };
    FormControl.prototype.hasErrorAndDirty = function (error) {
        return hasErrorAndDirty(this, error);
    };
    FormControl.prototype.setEnable = function (enable, opts) {
        if (enable === void 0) { enable = true; }
        enableControl(this, enable, opts);
    };
    FormControl.prototype.setDisable = function (disable, opts) {
        if (disable === void 0) { disable = true; }
        disableControl(this, disable, opts);
    };
    return FormControl;
}(NgFormControl));
export { FormControl };
//# sourceMappingURL=data:application/json;base64,